package com.example.dealingapp.mvc.plugin.table;import java.util.Comparator;import java.util.Date;import java.util.Enumeration;import javax.swing.table.TableColumn;import javax.swing.table.TableModel;import javax.swing.table.TableRowSorter;import com.example.dealingapp.mvc.plugin.table.GTableColumn.ColumnProperty;import com.example.dealingapp.mvc.plugin.table.model.GTableColumnModel;public class GTableRowSorter<M extends TableModel> extends TableRowSorter<TableModel> {		public GTableRowSorter() {		super(null);	}	public GTableRowSorter(M model) {		super(model);	}	public void setComparators(GTableColumnModel tableColumnModel) {		Enumeration<TableColumn> columns = tableColumnModel.getColumns();		GTableColumn tableColumn;		for (; columns.hasMoreElements();) {			tableColumn = (GTableColumn)columns.nextElement();			ColumnProperty cp = tableColumn.getColumnProperty();			setComparator(tableColumn.getModelIndex(), new Comparator<Object>() {				public int compare(Object o1, Object o2) {					if (o1 == null && o2 == null) {						return 0;					} else if (o1 == null) {						return -1;					} else if (o2 == null) {						return 1;					} else {						Class<?> type = cp.getColumnClazz();						if (type.getSuperclass() == Number.class) {							return compareNumber((Number) o1, (Number) o2);						} else if (type == String.class) {							return ((String) o1).compareTo((String) o2);						} else if (type == Date.class) {							return compareDate((Date) o1, (Date) o2);						} else if (type == Boolean.class) {							return compareBoolean((Boolean) o1, (Boolean) o2);						} else {							return ((String) o1).compareTo((String) o2);						}					}				}			});			setSortable(tableColumn.getModelIndex(), true);		}	}	public int compareNumber(Number o1, Number o2) {		double n1 = o1.doubleValue();		double n2 = o2.doubleValue();		if (n1 < n2) {			return -1;		} else if (n1 > n2) {			return 1;		} else {			return 0;		}	}	public int compareDate(Date o1, Date o2) {		long n1 = o1.getTime();		long n2 = o2.getTime();		if (n1 < n2) {			return -1;		} else if (n1 > n2) {			return 1;		} else {			return 0;		}	}	public int compareBoolean(Boolean o1, Boolean o2) {		boolean b1 = o1.booleanValue();		boolean b2 = o2.booleanValue();		if (b1 == b2) {			return 0;		} else if (b1) {			return 1;		} else {			return -1;		}	}}