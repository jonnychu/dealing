package com.example.dealingapp.mvc.plugin.table;import java.awt.Component;import java.awt.Dimension;import java.util.Enumeration;import java.util.Vector;import javax.swing.JTable;import javax.swing.table.TableCellRenderer;import javax.swing.table.TableColumn;public class GTableHeaderColumnGroup {	private final static int defaultHeaderOneRowHeight = 22;	protected int headerOneRowHeight;	protected int margin;	protected TableCellRenderer renderer;	protected String text;	protected Vector v;	public GTableHeaderColumnGroup(String text) {		this(null,text,defaultHeaderOneRowHeight);	}		public GTableHeaderColumnGroup(String text, int headerOneRowHeight) {		this(null,text,headerOneRowHeight);	}	public GTableHeaderColumnGroup(TableCellRenderer renderer, String text, int headerOneRowHeight) {		if (renderer == null) {			this.headerOneRowHeight = headerOneRowHeight;			this.renderer = new GTableHeaderRenders.DefaultGTableHeaderColumnRender();		} else {			this.renderer = renderer;		}		this.text = text;		v = new Vector();	}	public void add(Object obj) {		if (obj == null) {			return;		}		if (!v.contains(obj)) {			v.addElement(obj);		}	}	public Vector getColumnGroups(TableColumn c, Vector g) {		g.addElement(this);		if (v.contains(c))			return g;		Enumeration e = v.elements();		while (e.hasMoreElements()) {			Object obj = e.nextElement();			if (obj instanceof GTableHeaderColumnGroup) {				Vector groups = (Vector) ((GTableHeaderColumnGroup) obj).getColumnGroups(c, (Vector) g.clone());				if (groups != null)					return groups;			}		}		return null;	}	public TableCellRenderer getHeaderRenderer() {		return renderer;	}	public Object getHeaderValue() {		return text;	}	public Dimension getSize(JTable table) {		int height = 0;		if (this.headerOneRowHeight > 0) {			height = this.headerOneRowHeight;		} else {			Component comp = renderer.getTableCellRendererComponent(table, getHeaderValue(), false, false, -1, -1);			height = comp.getPreferredSize().height;		}		int width = 0;		Enumeration e = v.elements();		while (e.hasMoreElements()) {			Object obj = e.nextElement();			if (obj instanceof TableColumn) {				TableColumn aColumn = (TableColumn) obj;				width += aColumn.getWidth();				width += margin;			} else {				width += ((GTableHeaderColumnGroup) obj).getSize(table).width;			}		}		return new Dimension(width, height);	}	public void setColumnMargin(int margin) {		this.margin = margin;		Enumeration e = v.elements();		while (e.hasMoreElements()) {			Object obj = e.nextElement();			if (obj instanceof GTableHeaderColumnGroup) {				((GTableHeaderColumnGroup) obj).setColumnMargin(margin);			}		}	}	public void setHeaderRenderer(TableCellRenderer renderer) {		if (renderer != null) {			this.renderer = renderer;		}	}}