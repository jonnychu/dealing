package com.example.dealingapp.mvc.plugin.table;import java.awt.Component;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.List;import javax.swing.JCheckBoxMenuItem;import javax.swing.JLabel;import javax.swing.JPopupMenu;import javax.swing.JTable;import javax.swing.ListSelectionModel;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.JTableHeader;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import com.example.dealingapp.mvc.plugin.table.GTableColumn.ColumnProperty;public class GTable extends JTable {	private int headerOneRowHeight = 22;	public GTable() {		setRowHeight(headerOneRowHeight);		setAutoResizeMode(GTable.AUTO_RESIZE_OFF);		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);		setIntercellSpacing(new Dimension(1, 1));		Dimension viewSize = new Dimension(getColumnModel().getTotalColumnWidth(), 10 * getRowHeight());		setPreferredScrollableViewportSize(viewSize);		addTableHeaderRightMouseListener();		addTableRightMouseListener();		setTableHeaderRender();	}	public void setTableHeaderGroup(List<GTableHeaderColumnGroup> colGroup, int headerRowCount) {		GTableHeader header = new GTableHeader(getColumnModel(), headerRowCount, headerOneRowHeight);		header.addColumnGroup(colGroup);		setTableHeader(header);	}		protected void setTableHeaderRender() {		JTableHeader tableHeader = getTableHeader();		tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {			@Override			public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected,					boolean hasFocus, int row, int column) {				super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);				JTableHeader header = table.getTableHeader();				setHorizontalAlignment(JLabel.CENTER);				setForeground(header.getForeground());				setBackground(header.getBackground());				setFont(header.getFont());				setBorder(UIManager.getBorder("TableHeader.cellBorder"));				return this;			}		});	}	protected void showPopupMenu(MouseEvent e) {		if (SwingUtilities.isRightMouseButton(e)) {			JPopupMenu popupMenu = getPopupMenu();			if (popupMenu != null) {				popupMenu.show(e.getComponent(), e.getX(), e.getY());			}		}	}	protected JPopupMenu getPopupMenu() {		JPopupMenu popupMenu = new JPopupMenu();		JCheckBoxMenuItem menuItem;		TableColumnModel tableColumnModel = getColumnModel();		int columnCount = tableColumnModel.getColumnCount();		TableColumn tableColumn;		String name;		for (int i = 0; i < columnCount; i++) {			tableColumn = tableColumnModel.getColumn(i);			name = (String) tableColumn.getHeaderValue();			if (name == null || name.trim().length() == 0) {				continue;			}			menuItem = new JCheckBoxMenuItem(name);			if (tableColumn.getMaxWidth() == 0) {				menuItem.setSelected(false);			} else {				menuItem.setSelected(true);			}			menuItem.setActionCommand(String.valueOf(tableColumn.getIdentifier()));			menuItem.addActionListener(new RightMouseActionListener());			popupMenu.add(menuItem);		}		return popupMenu;	}		protected void addTableHeaderRightMouseListener() {		getTableHeader().addMouseListener(new MouseAdapter() {			public void mouseClicked(MouseEvent e) {				showPopupMenu(e);			}		});	}	protected void addTableRightMouseListener() {		addMouseListener(new MouseAdapter() {			public void mouseClicked(MouseEvent e) {				showPopupMenu(e);			}		});	}		private class RightMouseActionListener implements ActionListener {		public void actionPerformed(ActionEvent e) {			if (e.getSource() instanceof JCheckBoxMenuItem) {				JCheckBoxMenuItem menuItem = (JCheckBoxMenuItem) e.getSource();				if (menuItem.isSelected()) {					showColumn(getColumnModel().getColumnIndex(menuItem.getActionCommand()));				} else {					hideColumn(getColumnModel().getColumnIndex(menuItem.getActionCommand()));				}			}		}		public void hideColumn(int index) {			GTableColumn tableColumn = (GTableColumn) getColumnModel().getColumn(index);			ColumnProperty colProperty = tableColumn.getColumnProperty();			colProperty.setColWidth(tableColumn.getWidth());			tableColumn.setMinWidth(0);			tableColumn.setMaxWidth(0);		}		public void showColumn(int index) {			GTableColumn tableColumn = (GTableColumn) getColumnModel().getColumn(index);			ColumnProperty colProperty = tableColumn.getColumnProperty();			tableColumn.setMaxWidth(1000);			tableColumn.setMinWidth(15);			tableColumn.setPreferredWidth(colProperty.getColWidth());		}	}}