package com.example.dealingapp.mvc.plugin.table;import java.awt.Component;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Rectangle;import java.util.Enumeration;import java.util.Hashtable;import java.util.List;import java.util.Vector;import javax.swing.JComponent;import javax.swing.plaf.basic.BasicTableHeaderUI;import javax.swing.table.JTableHeader;import javax.swing.table.TableCellRenderer;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import com.example.dealingapp.mvc.plugin.table.sorter.SortButtonRenderer;public class GTableHeader extends JTableHeader {	protected Vector<GTableHeaderColumnGroup> columnGroups = null;	private int headerOneRowHeight = 0;	private int headerRowCount = 0;	public GTableHeader(TableColumnModel model, int headerRowCount, int headerOneRowHeight) {		super(model);		setUI(new GroupTableHeaderUI(this));		setResizingAllowed(true);		setReorderingAllowed(false);		setHeaderRowCount(headerRowCount);		setHeaderOneRowHeight(headerOneRowHeight);	}	public void addColumnGroup(List<GTableHeaderColumnGroup> g) {		if (columnGroups == null) {			columnGroups = new Vector<>();		}		columnGroups.addAll(g);	}	public Enumeration<GTableHeaderColumnGroup> getColumnGroups(TableColumn col) {		if (columnGroups == null)			return null;		Enumeration<GTableHeaderColumnGroup> e = columnGroups.elements();		while (e.hasMoreElements()) {			GTableHeaderColumnGroup cGroup = (GTableHeaderColumnGroup) e.nextElement();			Vector<GTableHeaderColumnGroup> v_ret = (Vector<GTableHeaderColumnGroup>) cGroup.getColumnGroups(col,					new Vector<>());			if (v_ret != null) {				return v_ret.elements();			}		}		return null;	}	public int getHeaderOneRowHeight() {		return headerOneRowHeight;	}	public int getHeaderRowCount() {		return headerRowCount;	}	public void setColumnMargin() {		if (columnGroups == null)			return;		int columnMargin = getColumnModel().getColumnMargin();		Enumeration<GTableHeaderColumnGroup> e = columnGroups.elements();		while (e.hasMoreElements()) {			GTableHeaderColumnGroup cGroup = (GTableHeaderColumnGroup) e.nextElement();			cGroup.setColumnMargin(columnMargin);		}	}	public void setHeaderOneRowHeight(int headerOneRowHeight) {		this.headerOneRowHeight = headerOneRowHeight;	}	public void setHeaderRowCount(int headerRowCount) {		this.headerRowCount = headerRowCount;	}	public void setReorderingAllowed(boolean b) {		reorderingAllowed = false;	}	public void updateUI() {		setUI(new GroupTableHeaderUI(this));	}	private class GroupTableHeaderUI extends BasicTableHeaderUI {		private GTableHeader tableHeader;		public GroupTableHeaderUI(GTableHeader tableHeader) {			this.tableHeader = tableHeader;		}		private Dimension createHeaderSize(long width) {			TableColumnModel columnModel = header.getColumnModel();			width += columnModel.getColumnMargin() * columnModel.getColumnCount();			if (width > Integer.MAX_VALUE) {				width = Integer.MAX_VALUE;			}			return new Dimension((int) width, getHeaderHeight());		}		private int getHeaderHeight() {			int height = 0;			TableColumnModel columnModel = header.getColumnModel();			for (int column = 0; column < columnModel.getColumnCount(); column++) {				TableColumn aColumn = columnModel.getColumn(column);				TableCellRenderer renderer = aColumn.getHeaderRenderer();				if (renderer == null) {					return tableHeader.getHeaderRowCount() * tableHeader.getHeaderOneRowHeight();				}				Component comp = renderer.getTableCellRendererComponent(header.getTable(), aColumn.getHeaderValue(),						false, false, -1, column);				int cHeight = comp.getPreferredSize().height;				Enumeration<GTableHeaderColumnGroup> e = ((GTableHeader) header).getColumnGroups(aColumn);				if (e != null) {					while (e.hasMoreElements()) {						GTableHeaderColumnGroup cGroup = (GTableHeaderColumnGroup) e.nextElement();						cHeight += cGroup.getSize(header.getTable()).height;					}				}				height = Math.max(height, cHeight);			}			return height;		}		public Dimension getPreferredSize(JComponent c) {			long width = 0;			Enumeration<TableColumn> enumeration = header.getColumnModel().getColumns();			while (enumeration.hasMoreElements()) {				TableColumn aColumn = (TableColumn) enumeration.nextElement();				width = width + aColumn.getPreferredWidth();			}			return createHeaderSize(width);		}		public void paint(Graphics g, JComponent c) {			Rectangle clipBounds = g.getClipBounds();			if (header.getColumnModel() == null)				return;			// ((GroupableTableHeader) header).setColumnMargin();			int column = 0;			Dimension size = header.getSize();			Rectangle cellRect = new Rectangle(0, 0, size.width, size.height);			Hashtable htGroup = new Hashtable();			// int columnMargin = header.getColumnModel().getColumnMargin();			Enumeration enumeration = header.getColumnModel().getColumns();			while (enumeration.hasMoreElements()) {				cellRect.height = size.height;				cellRect.y = 0;				TableColumn aColumn = (TableColumn) enumeration.nextElement();				Enumeration cGroups = ((GTableHeader) header).getColumnGroups(aColumn);				if (cGroups != null) {					int groupHeight = 0;					while (cGroups.hasMoreElements()) {						GTableHeaderColumnGroup cGroup = (GTableHeaderColumnGroup) cGroups.nextElement();						Rectangle groupRect = (Rectangle) htGroup.get(cGroup);						if (groupRect == null) {							groupRect = new Rectangle(cellRect);							Dimension d = cGroup.getSize(header.getTable());							groupRect.width = d.width;							groupRect.height = d.height;							htGroup.put(cGroup, groupRect);						}						paintCell(g, groupRect, cGroup);						groupHeight += groupRect.height;						cellRect.height = size.height - groupHeight;						cellRect.y = groupHeight;					}				}				cellRect.width = aColumn.getWidth();// + columnMargin;				if (cellRect.intersects(clipBounds)) {					paintCell(g, cellRect, column);				}				cellRect.x += cellRect.width;				column++;			}		}		private void paintCell(Graphics g, Rectangle cellRect, GTableHeaderColumnGroup cGroup) {			TableCellRenderer renderer = cGroup.getHeaderRenderer();			Component c = renderer.getTableCellRendererComponent(header.getTable(), cGroup.getHeaderValue(), false,					false, -1, -1);			rendererPane.add(c);			rendererPane.paintComponent(g, c, header, cellRect.x, cellRect.y, cellRect.width, cellRect.height, true);			System.out.println("group " + cGroup.getHeaderValue());		}		private void paintCell(Graphics g, Rectangle cellRect, int columnIndex) {			TableColumn aColumn = header.getColumnModel().getColumn(columnIndex);			TableCellRenderer renderer = new GTableHeaderRenders.DefaultGTableHeaderRender();			Component c = renderer.getTableCellRendererComponent(header.getTable(), aColumn.getHeaderValue(), false,					false, -1, columnIndex);			rendererPane.add(c);			rendererPane.paintComponent(g, c, header, cellRect.x, cellRect.y, cellRect.width, cellRect.height, true);			System.out.println("column " + aColumn.getHeaderValue());		}	}}