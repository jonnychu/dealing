package com.example.dealingapp.mvc.plugin.table.model;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.table.AbstractTableModel;import com.example.dealingapp.mvc.plugin.table.GTableColumn;import com.example.dealingapp.mvc.plugin.table.GTableColumn.ColumnProperty;public class GTableModel extends AbstractTableModel{		private static final long serialVersionUID = 1L;		private GTableColumnModel columnModel;	private List<?> dataset = new ArrayList<>();		/**	 * @param columnModel	 */	public GTableModel(GTableColumnModel columnModel){		this.columnModel = columnModel;	}	@Override    public Class<?> getColumnClass(int columnIndex) {		GTableColumn tableColumn = (GTableColumn) this.columnModel.getColumn(columnIndex);		ColumnProperty colProperty = tableColumn.getColumnProperty();        return colProperty.getColumnClazz();    }		@Override	public int getColumnCount() {		return this.columnModel.getColumnCount();	}		@Override	public int getRowCount() {		return this.dataset.size();	}		@Override	public boolean isCellEditable(int rowIndex, int columnIndex){		return true;	}		//TODO	public List<?> getRows(){		return this.dataset;	}		public void addRows(List rowset) {		if (rowset == null || rowset.size() == 0) {			return;		}		int first = this.dataset.size();		int last = first + rowset.size() - 1;		this.dataset.addAll(rowset);		fireTableRowsInserted(first, last);	}		public void updateCell(Object value,int rowIndex, int columnIndex){		setValueAt(value,rowIndex,columnIndex);		fireTableCellUpdated(rowIndex,columnIndex);	}		public void removeRow(int rowIndex) {		Object row = this.dataset.get(rowIndex);		this.dataset.remove(row);		fireTableRowsDeleted(rowIndex, rowIndex);		fireTableDataChanged();	}		public void removeAll() {		int index = getRowCount();		if (index <= 0)			return;		dataset.clear();		fireTableRowsDeleted(0, index - 1);	}	@Override	public Object getValueAt(int rowIndex, int columnIndex) {		GTableColumn tableColumn = (GTableColumn) this.columnModel.getColumn(columnIndex);		ColumnProperty colProperty = tableColumn.getColumnProperty();		Object rowData = this.dataset.get(rowIndex);		Object getter = getter(colProperty, rowData);		return getter;	}		private Object getter(ColumnProperty colProperty,Object row){		try {			Class<?> clazz = colProperty.getRowClazz();			Method getter = clazz.getMethod(colProperty.getGetterMethod());			return getter.invoke(row);		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (IllegalArgumentException e) {			e.printStackTrace();		} catch (InvocationTargetException e) {			e.printStackTrace();		} catch (NoSuchMethodException e) {			e.printStackTrace();		} catch (SecurityException e) {			e.printStackTrace();		}		return null;	}		@Override	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {				GTableColumn tableColumn = (GTableColumn) this.columnModel.getColumn(columnIndex);		ColumnProperty colProperty = tableColumn.getColumnProperty();		Object rowData = this.dataset.get(rowIndex);		if (colProperty.getColumnClazz() == Integer.class) {			setter(colProperty, rowData, Integer.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == BigDecimal.class) {			setter(colProperty, rowData, new BigDecimal(aValue.toString()));		} else if (colProperty.getColumnClazz() == Boolean.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Long.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Double.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Short.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Byte.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Float.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else if (colProperty.getColumnClazz() == Boolean.class) {			setter(colProperty, rowData, Boolean.valueOf(aValue.toString()));		} else {			setter(colProperty, rowData, aValue);		}	}		private void setter(ColumnProperty colProperty,Object row ,Object aValue){		try {			Class<?> clazz = colProperty.getRowClazz();			Method setter = clazz.getMethod(colProperty.getSetterMethod(),new Class[]{colProperty.getColumnClazz()});			setter.invoke(row,aValue);		} catch (IllegalArgumentException e) {			e.printStackTrace();		} catch (NoSuchMethodException e) {			e.printStackTrace();		} catch (SecurityException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		} catch (InvocationTargetException e) {			e.printStackTrace();		}	}}